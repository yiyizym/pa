/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _Pa = __webpack_require__(2);\n\nvar _Pa2 = _interopRequireDefault(_Pa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar url = '/list.json';\n(0, _Pa2.default)('#app', url);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbInVybCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBQ0EsSUFBTUEsTUFBTSxZQUFaO0FBQ0Esa0JBQUcsTUFBSCxFQUFXQSxHQUFYIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGEgZnJvbSAnLi9QYS5qcydcbmNvbnN0IHVybCA9ICcvbGlzdC5qc29uJ1xuUGEoJyNhcHAnLCB1cmwpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__webpack_require__(0);\n\nvar _scrollManager = __webpack_require__(3);\n\nvar _scrollManager2 = _interopRequireDefault(_scrollManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Pa = function Pa(selector, url) {\n  if (!(this instanceof Pa)) {\n    return new Pa(selector, url);\n  }\n  this.container = document.querySelector(selector) || document.createElement('div');\n  this.container.classList.add('pa_container');\n  this.url = url;\n\n  this.fetch(url).then(function (resp) {\n    return resp.json();\n  }).then(this.buildPage.bind(this));\n};\n\nPa.prototype.fetch = function (url) {\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n};\n\nPa.prototype.buildPage = function (data) {\n\n  var ul = this.ul = document.createElement('ul');\n  ul.classList.add('pa_current_page');\n  data['list'].forEach(function (item) {\n    var li = document.createElement('li');\n    li.textContent = item.value;\n    li.setAttribute('id', item.id);\n    ul.appendChild(li);\n  });\n\n  var otherul = this.otherul = document.createElement('ul');\n  otherul.classList.add('pa_other_page');\n  data['list'].forEach(function (item) {\n    var li = document.createElement('li');\n    li.textContent = Number(item.value) + 10;\n    li.setAttribute('id', Number(item.id) + 10);\n    otherul.appendChild(li);\n  });\n\n  this.container.appendChild(ul);\n  this.container.appendChild(otherul);\n  //   scrollManager.scrollBy(otherul, 1000)\n  _scrollManager2.default.disableScroll(otherul);\n  this.monit();\n};\n\nPa.prototype.monit = function () {\n  var context = this;\n  var up_pivot = this.up_pivot = document.createElement('div');\n  up_pivot.classList.add('pa_up_pivot');\n  this.container.insertBefore(up_pivot, this.container.firstChild);\n\n  var down_pivot = this.down_pivot = document.createElement('div');\n  down_pivot.classList.add('pa_down_pivot');\n  this.container.appendChild(down_pivot);\n\n  var io = new IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      console.log('see target! ', entry.target, entry.intersectionRatio);\n      entry.target.classList.toggle('pa_visible', entry.intersectionRatio === 1);\n    });\n  }, {\n    root: context.container,\n    threshold: 1.0\n  });\n\n  io.observe(up_pivot);\n  io.observe(down_pivot);\n\n  var ts;\n  document.addEventListener('touchstart', function (e) {\n    ts = e.touches[0].clientY;\n  });\n\n  var ticking = false;\n  document.addEventListener('touchmove', function (e) {\n    if (!ticking) {\n      window.requestAnimationFrame(function () {\n\n        var te = e.changedTouches[0].clientY;\n        if (ts > te && context.down_pivot.classList.contains('pa_visible')) {\n          // down\n          var distance = ts - te;\n          document.querySelector('.pa_current_page').style = 'transform: translate3d(0,' + -distance + 'px,0);';\n          console.log('show next page');\n        } else if (context.up_pivot.classList.contains('pa_visible')) {\n          //up\n          console.log('show previous page');\n        }\n        ticking = false;\n      });\n    }\n    ticking = true;\n  });\n\n  document.addEventListener('touchend', function (e) {\n    if ( /* direction == 'up' && threshold > 100 */true) {\n      //   context.ul.classList.add('fly_up')\n    }\n  });\n};\n\nexports.default = Pa;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  // left: 37, up: 38, right: 39, down: 40,\n  // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36\n  keys: { 37: 1, 38: 1, 39: 1, 40: 1 },\n  preventDefault: function preventDefault(e) {\n    console.log('catched scroll!');\n    e = e || window.event;\n    if (e.preventDefault) e.preventDefault();\n    e.returnValue = false;\n  },\n  preventDefaultForScrollKeys: function preventDefaultForScrollKeys(e) {\n    if (keys[e.keyCode]) {\n      preventDefault(e);\n      return false;\n    }\n  },\n  disableScroll: function disableScroll(el) {\n    debugger;\n    console.log('set up disable scroll');\n    if (el.addEventListener) {\n      // older FF\n      el.addEventListener('DOMMouseScroll', this.preventDefault, false);\n    }\n    el.onwheel = this.preventDefault; // modern standard\n    el.onmousewheel = el.onmousewheel = this.preventDefault; // older browsers, IE\n    el.ontouchmove = this.preventDefault; // mobile\n    el.onkeydown = this.preventDefaultForScrollKeys;\n  },\n\n  enableScroll: function enableScroll(el) {\n    if (el.removeEventListener) {\n      el.removeEventListener('DOMMouseScroll', this.preventDefault, false);\n    }\n    el.onmousewheel = el.onmousewheel = null;\n    el.onwheel = null;\n    el.ontouchmove = null;\n    el.onkeydown = null;\n  },\n\n  scrollBy: function scrollBy(el, num) {\n    console.log('>>>> scrollTop: ', num);\n    el.scrollTop = num;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nyb2xsTWFuYWdlci5qcz8yOWVlIl0sIm5hbWVzIjpbImtleXMiLCJwcmV2ZW50RGVmYXVsdCIsImUiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiZXZlbnQiLCJyZXR1cm5WYWx1ZSIsInByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cyIsImtleUNvZGUiLCJkaXNhYmxlU2Nyb2xsIiwiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwib253aGVlbCIsIm9ubW91c2V3aGVlbCIsIm9udG91Y2htb3ZlIiwib25rZXlkb3duIiwiZW5hYmxlU2Nyb2xsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNjcm9sbEJ5IiwibnVtIiwic2Nyb2xsVG9wIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFBZTtBQUNiO0FBQ0E7QUFDQUEsUUFBTSxFQUFDLElBQUksQ0FBTCxFQUFRLElBQUksQ0FBWixFQUFlLElBQUksQ0FBbkIsRUFBc0IsSUFBSSxDQUExQixFQUhPO0FBSWJDLGtCQUFnQix3QkFBVUMsQ0FBVixFQUFhO0FBQzNCQyxZQUFRQyxHQUFSLENBQVksaUJBQVo7QUFDQUYsUUFBSUEsS0FBS0csT0FBT0MsS0FBaEI7QUFDQSxRQUFJSixFQUFFRCxjQUFOLEVBQ0lDLEVBQUVELGNBQUY7QUFDSkMsTUFBRUssV0FBRixHQUFnQixLQUFoQjtBQUNELEdBVlk7QUFXYkMsK0JBQTZCLHFDQUFVTixDQUFWLEVBQWE7QUFDeEMsUUFBSUYsS0FBS0UsRUFBRU8sT0FBUCxDQUFKLEVBQXFCO0FBQ2pCUixxQkFBZUMsQ0FBZjtBQUNBLGFBQU8sS0FBUDtBQUNIO0FBQ0YsR0FoQlk7QUFpQmJRLGlCQUFlLHVCQUFVQyxFQUFWLEVBQWM7QUFDM0I7QUFDQVIsWUFBUUMsR0FBUixDQUFZLHVCQUFaO0FBQ0EsUUFBSU8sR0FBR0MsZ0JBQVAsRUFBd0I7QUFBRTtBQUN4QkQsU0FBR0MsZ0JBQUgsQ0FBb0IsZ0JBQXBCLEVBQXNDLEtBQUtYLGNBQTNDLEVBQTJELEtBQTNEO0FBQ0Q7QUFDRFUsT0FBR0UsT0FBSCxHQUFhLEtBQUtaLGNBQWxCLENBTjJCLENBTU87QUFDbENVLE9BQUdHLFlBQUgsR0FBa0JILEdBQUdHLFlBQUgsR0FBa0IsS0FBS2IsY0FBekMsQ0FQMkIsQ0FPOEI7QUFDekRVLE9BQUdJLFdBQUgsR0FBa0IsS0FBS2QsY0FBdkIsQ0FSMkIsQ0FRWTtBQUN2Q1UsT0FBR0ssU0FBSCxHQUFnQixLQUFLUiwyQkFBckI7QUFDRCxHQTNCWTs7QUE2QmJTLGdCQUFjLHNCQUFVTixFQUFWLEVBQWM7QUFDMUIsUUFBSUEsR0FBR08sbUJBQVAsRUFBMkI7QUFDekJQLFNBQUdPLG1CQUFILENBQXVCLGdCQUF2QixFQUF5QyxLQUFLakIsY0FBOUMsRUFBOEQsS0FBOUQ7QUFDRDtBQUNEVSxPQUFHRyxZQUFILEdBQWtCSCxHQUFHRyxZQUFILEdBQWtCLElBQXBDO0FBQ0FILE9BQUdFLE9BQUgsR0FBYSxJQUFiO0FBQ0FGLE9BQUdJLFdBQUgsR0FBaUIsSUFBakI7QUFDQUosT0FBR0ssU0FBSCxHQUFlLElBQWY7QUFDRCxHQXJDWTs7QUF1Q2JHLFlBQVUsa0JBQVVSLEVBQVYsRUFBY1MsR0FBZCxFQUFtQjtBQUMzQmpCLFlBQVFDLEdBQVIsQ0FBWSxrQkFBWixFQUFnQ2dCLEdBQWhDO0FBQ0FULE9BQUdVLFNBQUgsR0FBZUQsR0FBZjtBQUNEO0FBMUNZLEMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gbGVmdDogMzcsIHVwOiAzOCwgcmlnaHQ6IDM5LCBkb3duOiA0MCxcbiAgLy8gc3BhY2ViYXI6IDMyLCBwYWdldXA6IDMzLCBwYWdlZG93bjogMzQsIGVuZDogMzUsIGhvbWU6IDM2XG4gIGtleXM6IHszNzogMSwgMzg6IDEsIDM5OiAxLCA0MDogMX0sXG4gIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnNvbGUubG9nKCdjYXRjaGVkIHNjcm9sbCEnKVxuICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdClcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgfSxcbiAgcHJldmVudERlZmF1bHRGb3JTY3JvbGxLZXlzOiBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChrZXlzW2Uua2V5Q29kZV0pIHtcbiAgICAgICAgcHJldmVudERlZmF1bHQoZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGRpc2FibGVTY3JvbGw6IGZ1bmN0aW9uIChlbCkge1xuICAgIGRlYnVnZ2VyXG4gICAgY29uc29sZS5sb2coJ3NldCB1cCBkaXNhYmxlIHNjcm9sbCcpXG4gICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpeyAvLyBvbGRlciBGRlxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzLnByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgfVxuICAgIGVsLm9ud2hlZWwgPSB0aGlzLnByZXZlbnREZWZhdWx0OyAvLyBtb2Rlcm4gc3RhbmRhcmRcbiAgICBlbC5vbm1vdXNld2hlZWwgPSBlbC5vbm1vdXNld2hlZWwgPSB0aGlzLnByZXZlbnREZWZhdWx0OyAvLyBvbGRlciBicm93c2VycywgSUVcbiAgICBlbC5vbnRvdWNobW92ZSAgPSB0aGlzLnByZXZlbnREZWZhdWx0OyAvLyBtb2JpbGVcbiAgICBlbC5vbmtleWRvd24gID0gdGhpcy5wcmV2ZW50RGVmYXVsdEZvclNjcm9sbEtleXM7XG4gIH0sXG5cbiAgZW5hYmxlU2Nyb2xsOiBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcil7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHRoaXMucHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgICB9XG4gICAgZWwub25tb3VzZXdoZWVsID0gZWwub25tb3VzZXdoZWVsID0gbnVsbDtcbiAgICBlbC5vbndoZWVsID0gbnVsbDtcbiAgICBlbC5vbnRvdWNobW92ZSA9IG51bGw7XG4gICAgZWwub25rZXlkb3duID0gbnVsbDtcbiAgfSxcblxuICBzY3JvbGxCeTogZnVuY3Rpb24gKGVsLCBudW0pIHtcbiAgICBjb25zb2xlLmxvZygnPj4+PiBzY3JvbGxUb3A6ICcsIG51bSlcbiAgICBlbC5zY3JvbGxUb3AgPSBudW1cbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JvbGxNYW5hZ2VyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(0);
module.exports = __webpack_require__(1);


/***/ })
/******/ ]);