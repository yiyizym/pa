/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _Pa = __webpack_require__(1);\n\nvar _Pa2 = _interopRequireDefault(_Pa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar url = '/list.json';\n(0, _Pa2.default)('#app', url);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbInVybCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBQ0EsSUFBTUEsTUFBTSxZQUFaO0FBQ0Esa0JBQUcsTUFBSCxFQUFXQSxHQUFYIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGEgZnJvbSAnLi9QYS5qcydcbmNvbnN0IHVybCA9ICcvbGlzdC5qc29uJ1xuUGEoJyNhcHAnLCB1cmwpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n__webpack_require__(4);\n\nvar _scrollManager = __webpack_require__(2);\n\nvar _scrollManager2 = _interopRequireDefault(_scrollManager);\n\nvar _turnPageManager = __webpack_require__(3);\n\nvar _turnPageManager2 = _interopRequireDefault(_turnPageManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MAX_HEIGHT = 1e5;\n\nvar Pa = function Pa(selector, url) {\n    var _this = this;\n\n    if (!(this instanceof Pa)) {\n        return new Pa(selector, url);\n    }\n    this.container = document.querySelector(selector) || document.createElement('div');\n    this.container.classList.add('pa_container');\n    this.url = url;\n\n    this.fetch(url).then(function (resp) {\n        return resp.json();\n    }).then(function () {\n        _this.buildPage();\n        _turnPageManager2.default.init({\n            prevPage: _this.prevPage,\n            currPage: _this.currPage,\n            nextPage: _this.nextPage\n        });\n    });\n};\n\nPa.prototype.fetch = function (url) {\n    return fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n};\n\nPa.prototype.buildPage = function (data) {\n\n    var prevPage = this.prevPage = document.createElement('ul');\n    prevPage.classList.add('prev_page');\n    data['list'].forEach(function (item) {\n        var li = document.createElement('li');\n        li.textContent = item.value;\n        li.setAttribute('id', item.id);\n        prevPage.appendChild(li);\n    });\n\n    var currPage = this.currPage = document.createElement('ul');\n    currPage.classList.add('current_page');\n    data['list'].forEach(function (item) {\n        var li = document.createElement('li');\n        li.textContent = Number(item.value) + 10;\n        li.setAttribute('id', Number(item.id) + 10);\n        currPage.appendChild(li);\n    });\n\n    var nextPage = this.nextPage = document.createElement('ul');\n    nextPage.classList.add('next_page');\n    data['list'].forEach(function (item) {\n        var li = document.createElement('li');\n        li.textContent = Number(item.value) + 20;\n        li.setAttribute('id', Number(item.id) + 20);\n        nextPage.appendChild(li);\n    });\n\n    this.container.appendChild(prevPage);\n    _scrollManager2.default.scrollBy(this.prevPage, MAX_HEIGHT);\n    this.container.appendChild(currPage);\n    this.container.appendChild(nextPage);\n    _scrollManager2.default.scrollBy(this.nextPage, 0);\n};\n\nexports.default = Pa;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUGEuanM/N2MzYSJdLCJuYW1lcyI6WyJNQVhfSEVJR0hUIiwiUGEiLCJzZWxlY3RvciIsInVybCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJmZXRjaCIsInRoZW4iLCJyZXNwIiwianNvbiIsImJ1aWxkUGFnZSIsImluaXQiLCJwcmV2UGFnZSIsImN1cnJQYWdlIiwibmV4dFBhZ2UiLCJwcm90b3R5cGUiLCJtZXRob2QiLCJoZWFkZXJzIiwiZGF0YSIsImZvckVhY2giLCJsaSIsInRleHRDb250ZW50IiwiaXRlbSIsInZhbHVlIiwic2V0QXR0cmlidXRlIiwiaWQiLCJhcHBlbmRDaGlsZCIsIk51bWJlciIsInNjcm9sbEJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxhQUFhLEdBQW5COztBQUVBLElBQU1DLEtBQUssU0FBTEEsRUFBSyxDQUFVQyxRQUFWLEVBQW9CQyxHQUFwQixFQUF5QjtBQUFBOztBQUNoQyxRQUFJLEVBQUUsZ0JBQWdCRixFQUFsQixDQUFKLEVBQTJCO0FBQ3ZCLGVBQU8sSUFBSUEsRUFBSixDQUFPQyxRQUFQLEVBQWlCQyxHQUFqQixDQUFQO0FBQ0g7QUFDRCxTQUFLQyxTQUFMLEdBQWlCQyxTQUFTQyxhQUFULENBQXVCSixRQUF2QixLQUFvQ0csU0FBU0UsYUFBVCxDQUF1QixLQUF2QixDQUFyRDtBQUNBLFNBQUtILFNBQUwsQ0FBZUksU0FBZixDQUF5QkMsR0FBekIsQ0FBNkIsY0FBN0I7QUFDQSxTQUFLTixHQUFMLEdBQVdBLEdBQVg7O0FBRUEsU0FBS08sS0FBTCxDQUFXUCxHQUFYLEVBQWdCUSxJQUFoQixDQUFxQixnQkFBUTtBQUN6QixlQUFPQyxLQUFLQyxJQUFMLEVBQVA7QUFDSCxLQUZELEVBRUdGLElBRkgsQ0FFUSxZQUFNO0FBQ1YsY0FBS0csU0FBTDtBQUNBLGtDQUFnQkMsSUFBaEIsQ0FBcUI7QUFDakJDLHNCQUFVLE1BQUtBLFFBREU7QUFFakJDLHNCQUFVLE1BQUtBLFFBRkU7QUFHakJDLHNCQUFVLE1BQUtBO0FBSEUsU0FBckI7QUFLSCxLQVREO0FBVUgsQ0FsQkQ7O0FBb0JBakIsR0FBR2tCLFNBQUgsQ0FBYVQsS0FBYixHQUFxQixVQUFVUCxHQUFWLEVBQWU7QUFDaEMsV0FBT08sTUFBTVAsR0FBTixFQUFXO0FBQ2RpQixnQkFBUSxLQURNO0FBRWRDLGlCQUFTO0FBQ0wsNEJBQWdCO0FBRFg7QUFGSyxLQUFYLENBQVA7QUFNSCxDQVBEOztBQVNBcEIsR0FBR2tCLFNBQUgsQ0FBYUwsU0FBYixHQUF5QixVQUFVUSxJQUFWLEVBQWdCOztBQUVyQyxRQUFJTixXQUFXLEtBQUtBLFFBQUwsR0FBZ0JYLFNBQVNFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBL0I7QUFDQVMsYUFBU1IsU0FBVCxDQUFtQkMsR0FBbkIsQ0FBdUIsV0FBdkI7QUFDQWEsU0FBSyxNQUFMLEVBQWFDLE9BQWIsQ0FBcUIsZ0JBQVE7QUFDekIsWUFBSUMsS0FBS25CLFNBQVNFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBaUIsV0FBR0MsV0FBSCxHQUFpQkMsS0FBS0MsS0FBdEI7QUFDQUgsV0FBR0ksWUFBSCxDQUFnQixJQUFoQixFQUFzQkYsS0FBS0csRUFBM0I7QUFDQWIsaUJBQVNjLFdBQVQsQ0FBcUJOLEVBQXJCO0FBQ0gsS0FMRDs7QUFPQSxRQUFJUCxXQUFXLEtBQUtBLFFBQUwsR0FBZ0JaLFNBQVNFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBL0I7QUFDQVUsYUFBU1QsU0FBVCxDQUFtQkMsR0FBbkIsQ0FBdUIsY0FBdkI7QUFDQWEsU0FBSyxNQUFMLEVBQWFDLE9BQWIsQ0FBcUIsZ0JBQVE7QUFDekIsWUFBSUMsS0FBS25CLFNBQVNFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBaUIsV0FBR0MsV0FBSCxHQUFpQk0sT0FBT0wsS0FBS0MsS0FBWixJQUFxQixFQUF0QztBQUNBSCxXQUFHSSxZQUFILENBQWdCLElBQWhCLEVBQXNCRyxPQUFPTCxLQUFLRyxFQUFaLElBQWtCLEVBQXhDO0FBQ0FaLGlCQUFTYSxXQUFULENBQXFCTixFQUFyQjtBQUNILEtBTEQ7O0FBT0EsUUFBSU4sV0FBVyxLQUFLQSxRQUFMLEdBQWdCYixTQUFTRSxhQUFULENBQXVCLElBQXZCLENBQS9CO0FBQ0FXLGFBQVNWLFNBQVQsQ0FBbUJDLEdBQW5CLENBQXVCLFdBQXZCO0FBQ0FhLFNBQUssTUFBTCxFQUFhQyxPQUFiLENBQXFCLGdCQUFRO0FBQ3pCLFlBQUlDLEtBQUtuQixTQUFTRSxhQUFULENBQXVCLElBQXZCLENBQVQ7QUFDQWlCLFdBQUdDLFdBQUgsR0FBaUJNLE9BQU9MLEtBQUtDLEtBQVosSUFBcUIsRUFBdEM7QUFDQUgsV0FBR0ksWUFBSCxDQUFnQixJQUFoQixFQUFzQkcsT0FBT0wsS0FBS0csRUFBWixJQUFrQixFQUF4QztBQUNBWCxpQkFBU1ksV0FBVCxDQUFxQk4sRUFBckI7QUFDSCxLQUxEOztBQU9BLFNBQUtwQixTQUFMLENBQWUwQixXQUFmLENBQTJCZCxRQUEzQjtBQUNBLDRCQUFjZ0IsUUFBZCxDQUF1QixLQUFLaEIsUUFBNUIsRUFBc0NoQixVQUF0QztBQUNBLFNBQUtJLFNBQUwsQ0FBZTBCLFdBQWYsQ0FBMkJiLFFBQTNCO0FBQ0EsU0FBS2IsU0FBTCxDQUFlMEIsV0FBZixDQUEyQlosUUFBM0I7QUFDQSw0QkFBY2MsUUFBZCxDQUF1QixLQUFLZCxRQUE1QixFQUFzQyxDQUF0QztBQUNILENBbENEOztrQkFvQ2VqQixFIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ3doYXR3Zy1mZXRjaCdcbmltcG9ydCBzY3JvbGxNYW5hZ2VyIGZyb20gJy4vc2Nyb2xsTWFuYWdlcidcbmltcG9ydCB0dXJuUGFnZU1hbmFnZXIgZnJvbSAnLi90dXJuUGFnZU1hbmFnZXInXG5cbmNvbnN0IE1BWF9IRUlHSFQgPSAxZTU7XG5cbmNvbnN0IFBhID0gZnVuY3Rpb24gKHNlbGVjdG9yLCB1cmwpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGEpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUGEoc2VsZWN0b3IsIHVybClcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3BhX2NvbnRhaW5lcicpXG4gICAgdGhpcy51cmwgPSB1cmxcblxuICAgIHRoaXMuZmV0Y2godXJsKS50aGVuKHJlc3AgPT4ge1xuICAgICAgICByZXR1cm4gcmVzcC5qc29uKClcbiAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5idWlsZFBhZ2UoKTtcbiAgICAgICAgdHVyblBhZ2VNYW5hZ2VyLmluaXQoe1xuICAgICAgICAgICAgcHJldlBhZ2U6IHRoaXMucHJldlBhZ2UsXG4gICAgICAgICAgICBjdXJyUGFnZTogdGhpcy5jdXJyUGFnZSxcbiAgICAgICAgICAgIG5leHRQYWdlOiB0aGlzLm5leHRQYWdlXG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuUGEucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9XG4gICAgfSlcbn1cblxuUGEucHJvdG90eXBlLmJ1aWxkUGFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICBsZXQgcHJldlBhZ2UgPSB0aGlzLnByZXZQYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKVxuICAgIHByZXZQYWdlLmNsYXNzTGlzdC5hZGQoJ3ByZXZfcGFnZScpXG4gICAgZGF0YVsnbGlzdCddLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJylcbiAgICAgICAgbGkudGV4dENvbnRlbnQgPSBpdGVtLnZhbHVlXG4gICAgICAgIGxpLnNldEF0dHJpYnV0ZSgnaWQnLCBpdGVtLmlkKVxuICAgICAgICBwcmV2UGFnZS5hcHBlbmRDaGlsZChsaSlcbiAgICB9KVxuXG4gICAgbGV0IGN1cnJQYWdlID0gdGhpcy5jdXJyUGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJylcbiAgICBjdXJyUGFnZS5jbGFzc0xpc3QuYWRkKCdjdXJyZW50X3BhZ2UnKVxuICAgIGRhdGFbJ2xpc3QnXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgICAgIGxpLnRleHRDb250ZW50ID0gTnVtYmVyKGl0ZW0udmFsdWUpICsgMTBcbiAgICAgICAgbGkuc2V0QXR0cmlidXRlKCdpZCcsIE51bWJlcihpdGVtLmlkKSArIDEwKVxuICAgICAgICBjdXJyUGFnZS5hcHBlbmRDaGlsZChsaSlcbiAgICB9KVxuXG4gICAgbGV0IG5leHRQYWdlID0gdGhpcy5uZXh0UGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJylcbiAgICBuZXh0UGFnZS5jbGFzc0xpc3QuYWRkKCduZXh0X3BhZ2UnKVxuICAgIGRhdGFbJ2xpc3QnXS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgICAgIGxpLnRleHRDb250ZW50ID0gTnVtYmVyKGl0ZW0udmFsdWUpICsgMjBcbiAgICAgICAgbGkuc2V0QXR0cmlidXRlKCdpZCcsIE51bWJlcihpdGVtLmlkKSArIDIwKVxuICAgICAgICBuZXh0UGFnZS5hcHBlbmRDaGlsZChsaSlcbiAgICB9KVxuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQocHJldlBhZ2UpXG4gICAgc2Nyb2xsTWFuYWdlci5zY3JvbGxCeSh0aGlzLnByZXZQYWdlLCBNQVhfSEVJR0hUKVxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGN1cnJQYWdlKVxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKG5leHRQYWdlKVxuICAgIHNjcm9sbE1hbmFnZXIuc2Nyb2xsQnkodGhpcy5uZXh0UGFnZSwgMClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9QYS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  // left: 37, up: 38, right: 39, down: 40,\n  // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36\n  keys: { 37: 1, 38: 1, 39: 1, 40: 1 },\n  preventDefault: function preventDefault(e) {\n    console.log('catched scroll!');\n    e = e || window.event;\n    if (e.preventDefault) e.preventDefault();\n    e.returnValue = false;\n  },\n  preventDefaultForScrollKeys: function preventDefaultForScrollKeys(e) {\n    if (keys[e.keyCode]) {\n      preventDefault(e);\n      return false;\n    }\n  },\n  disableScroll: function disableScroll(el) {\n    console.log('set up disable scroll');\n    if (el.addEventListener) {\n      // older FF\n      el.addEventListener('DOMMouseScroll', this.preventDefault, false);\n    }\n    el.onwheel = this.preventDefault; // modern standard\n    el.onmousewheel = el.onmousewheel = this.preventDefault; // older browsers, IE\n    el.ontouchmove = this.preventDefault; // mobile\n    el.onscroll = this.preventDefault;\n    el.onkeydown = this.preventDefaultForScrollKeys;\n  },\n\n  enableScroll: function enableScroll(el) {\n    if (el.removeEventListener) {\n      el.removeEventListener('DOMMouseScroll', this.preventDefault, false);\n    }\n    el.onmousewheel = el.onmousewheel = null;\n    el.onwheel = null;\n    el.ontouchmove = null;\n    el.onkeydown = null;\n  },\n\n  scrollBy: function scrollBy(el, num) {\n    console.log('>>>> scrollTop: ', num);\n    el.scrollTop = num;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nyb2xsTWFuYWdlci5qcz8yOWVlIl0sIm5hbWVzIjpbImtleXMiLCJwcmV2ZW50RGVmYXVsdCIsImUiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiZXZlbnQiLCJyZXR1cm5WYWx1ZSIsInByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5cyIsImtleUNvZGUiLCJkaXNhYmxlU2Nyb2xsIiwiZWwiLCJhZGRFdmVudExpc3RlbmVyIiwib253aGVlbCIsIm9ubW91c2V3aGVlbCIsIm9udG91Y2htb3ZlIiwib25zY3JvbGwiLCJvbmtleWRvd24iLCJlbmFibGVTY3JvbGwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2Nyb2xsQnkiLCJudW0iLCJzY3JvbGxUb3AiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUFlO0FBQ2I7QUFDQTtBQUNBQSxRQUFNLEVBQUMsSUFBSSxDQUFMLEVBQVEsSUFBSSxDQUFaLEVBQWUsSUFBSSxDQUFuQixFQUFzQixJQUFJLENBQTFCLEVBSE87QUFJYkMsa0JBQWdCLHdCQUFVQyxDQUFWLEVBQWE7QUFDM0JDLFlBQVFDLEdBQVIsQ0FBWSxpQkFBWjtBQUNBRixRQUFJQSxLQUFLRyxPQUFPQyxLQUFoQjtBQUNBLFFBQUlKLEVBQUVELGNBQU4sRUFDSUMsRUFBRUQsY0FBRjtBQUNKQyxNQUFFSyxXQUFGLEdBQWdCLEtBQWhCO0FBQ0QsR0FWWTtBQVdiQywrQkFBNkIscUNBQVVOLENBQVYsRUFBYTtBQUN4QyxRQUFJRixLQUFLRSxFQUFFTyxPQUFQLENBQUosRUFBcUI7QUFDakJSLHFCQUFlQyxDQUFmO0FBQ0EsYUFBTyxLQUFQO0FBQ0g7QUFDRixHQWhCWTtBQWlCYlEsaUJBQWUsdUJBQVVDLEVBQVYsRUFBYztBQUMzQlIsWUFBUUMsR0FBUixDQUFZLHVCQUFaO0FBQ0EsUUFBSU8sR0FBR0MsZ0JBQVAsRUFBd0I7QUFBRTtBQUN4QkQsU0FBR0MsZ0JBQUgsQ0FBb0IsZ0JBQXBCLEVBQXNDLEtBQUtYLGNBQTNDLEVBQTJELEtBQTNEO0FBQ0Q7QUFDRFUsT0FBR0UsT0FBSCxHQUFhLEtBQUtaLGNBQWxCLENBTDJCLENBS087QUFDbENVLE9BQUdHLFlBQUgsR0FBa0JILEdBQUdHLFlBQUgsR0FBa0IsS0FBS2IsY0FBekMsQ0FOMkIsQ0FNOEI7QUFDekRVLE9BQUdJLFdBQUgsR0FBa0IsS0FBS2QsY0FBdkIsQ0FQMkIsQ0FPWTtBQUN2Q1UsT0FBR0ssUUFBSCxHQUFjLEtBQUtmLGNBQW5CO0FBQ0FVLE9BQUdNLFNBQUgsR0FBZ0IsS0FBS1QsMkJBQXJCO0FBQ0QsR0EzQlk7O0FBNkJiVSxnQkFBYyxzQkFBVVAsRUFBVixFQUFjO0FBQzFCLFFBQUlBLEdBQUdRLG1CQUFQLEVBQTJCO0FBQ3pCUixTQUFHUSxtQkFBSCxDQUF1QixnQkFBdkIsRUFBeUMsS0FBS2xCLGNBQTlDLEVBQThELEtBQTlEO0FBQ0Q7QUFDRFUsT0FBR0csWUFBSCxHQUFrQkgsR0FBR0csWUFBSCxHQUFrQixJQUFwQztBQUNBSCxPQUFHRSxPQUFILEdBQWEsSUFBYjtBQUNBRixPQUFHSSxXQUFILEdBQWlCLElBQWpCO0FBQ0FKLE9BQUdNLFNBQUgsR0FBZSxJQUFmO0FBQ0QsR0FyQ1k7O0FBdUNiRyxZQUFVLGtCQUFVVCxFQUFWLEVBQWNVLEdBQWQsRUFBbUI7QUFDM0JsQixZQUFRQyxHQUFSLENBQVksa0JBQVosRUFBZ0NpQixHQUFoQztBQUNBVixPQUFHVyxTQUFILEdBQWVELEdBQWY7QUFDRDtBQTFDWSxDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIC8vIGxlZnQ6IDM3LCB1cDogMzgsIHJpZ2h0OiAzOSwgZG93bjogNDAsXG4gIC8vIHNwYWNlYmFyOiAzMiwgcGFnZXVwOiAzMywgcGFnZWRvd246IDM0LCBlbmQ6IDM1LCBob21lOiAzNlxuICBrZXlzOiB7Mzc6IDEsIDM4OiAxLCAzOTogMSwgNDA6IDF9LFxuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zb2xlLmxvZygnY2F0Y2hlZCBzY3JvbGwhJylcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gIH0sXG4gIHByZXZlbnREZWZhdWx0Rm9yU2Nyb2xsS2V5czogZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBkaXNhYmxlU2Nyb2xsOiBmdW5jdGlvbiAoZWwpIHtcbiAgICBjb25zb2xlLmxvZygnc2V0IHVwIGRpc2FibGUgc2Nyb2xsJylcbiAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcil7IC8vIG9sZGVyIEZGXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHRoaXMucHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgICB9XG4gICAgZWwub253aGVlbCA9IHRoaXMucHJldmVudERlZmF1bHQ7IC8vIG1vZGVybiBzdGFuZGFyZFxuICAgIGVsLm9ubW91c2V3aGVlbCA9IGVsLm9ubW91c2V3aGVlbCA9IHRoaXMucHJldmVudERlZmF1bHQ7IC8vIG9sZGVyIGJyb3dzZXJzLCBJRVxuICAgIGVsLm9udG91Y2htb3ZlICA9IHRoaXMucHJldmVudERlZmF1bHQ7IC8vIG1vYmlsZVxuICAgIGVsLm9uc2Nyb2xsID0gdGhpcy5wcmV2ZW50RGVmYXVsdDtcbiAgICBlbC5vbmtleWRvd24gID0gdGhpcy5wcmV2ZW50RGVmYXVsdEZvclNjcm9sbEtleXM7XG4gIH0sXG5cbiAgZW5hYmxlU2Nyb2xsOiBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcil7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHRoaXMucHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgICB9XG4gICAgZWwub25tb3VzZXdoZWVsID0gZWwub25tb3VzZXdoZWVsID0gbnVsbDtcbiAgICBlbC5vbndoZWVsID0gbnVsbDtcbiAgICBlbC5vbnRvdWNobW92ZSA9IG51bGw7XG4gICAgZWwub25rZXlkb3duID0gbnVsbDtcbiAgfSxcblxuICBzY3JvbGxCeTogZnVuY3Rpb24gKGVsLCBudW0pIHtcbiAgICBjb25zb2xlLmxvZygnPj4+PiBzY3JvbGxUb3A6ICcsIG51bSlcbiAgICBlbC5zY3JvbGxUb3AgPSBudW1cbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JvbGxNYW5hZ2VyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar formerPosition = 0,\n    afterPosition = 0,\n    ticking = false,\n    direction,\n    currentPageAtTop = true,\n    currentPageAtBottom = false,\n    turnPageSetted = false,\n    isTurnPage = false,\n    scrollTicking = false,\n    accumulatedDistance = 0;\nexports.default = {\n    init: function init(options) {\n\n        this.prevPage = options.prevPage;\n        this.currPage = options.currPage;\n        this.nextPage = options.nextPage;\n\n        this.currPage.addEventListener('scroll', this.detectPosition);\n\n        document.addEventListener('touchstart', function (e) {\n            formerPosition = e.touches[0].clientY;\n        });\n\n        this.setTurningPageCb();\n\n        this.setTurnedPageCb();\n    },\n    setTurningPageCb: function setTurningPageCb() {\n        var manager = this;\n        document.addEventListener('touchmove', function (e) {\n            if (!ticking) {\n                window.requestAnimationFrame(function () {\n\n                    afterPosition = e.changedTouches[0].clientY;\n\n                    manager.setTurnPage();\n\n                    if (currentPageAtTop && isTurnPage) {\n                        // if (manager.determineDirection() == 'down') {\n                        //     console.log('show previous page')\n                        // } else if (manager.determineDirection() == 'up') {\n                        //     console.log('resume')\n                        // }\n                        manager.prevPage.style.transform = 'translateY(' + Math.max(manager.getAccumulatedDistance(), 0) + 'px)';\n                    } else if (currentPageAtBottom && isTurnPage) {\n                        // if (manager.determineDirection() == 'up') {\n                        //     console.log('show next page')\n                        // } else if (manager.determineDirection() == 'down') {\n                        //     console.log('resume')\n                        // }\n                        manager.currPage.style.transform = 'translateY(' + Math.min(manager.getAccumulatedDistance(), 0) + 'px)';\n                    }\n                    formerPosition = afterPosition;\n                    ticking = false;\n                });\n            }\n            ticking = true;\n        });\n    },\n    setTurnPage: function setTurnPage() {\n        if (turnPageSetted) {\n            console.log('turnPage setted, return');\n            return;\n        }\n        if (currentPageAtBottom && manager.determineDirection() == 'up' || currentPageAtTop && manager.determineDirection() == 'down') {\n            turnPageSetted = true;\n            isTurnPage = true;\n            document.querySelector('.current_page').classList.add('turn_page');\n        }\n        console.log('isTurnPage: ', isTurnPage);\n    },\n    resetTurnPage: function resetTurnPage() {\n        console.log('resetTurnPage');\n        isTurnPage = false;\n        turnPageSetted = false;\n        document.querySelector('.current_page').classList.remove('turn_page');\n    },\n    determineDirection: function determineDirection() {\n        //由旧位置到新位置，如果线径是向上走的，就是 up\n        //由旧位置到新位置，如果线径是向下走的，就是 down\n        var direction = formerPosition > afterPosition ? 'up' : formerPosition < afterPosition ? 'down' : 'equal';\n        console.log('determineDirection: ', direction);\n        return direction;\n    },\n    getAccumulatedDistance: function getAccumulatedDistance() {\n        console.log('former accumulatedDistance: ', accumulatedDistance);\n        //新位置在旧位置的上方，会是负数\n        //新位置在旧位置的下方，会是正数\n        accumulatedDistance += afterPosition - formerPosition;\n        console.log('after accumulatedDistance: ', accumulatedDistance);\n        return accumulatedDistance;\n    },\n    resetAccumulatedDistance: function resetAccumulatedDistance() {\n        console.log('resetAccumulatedDistance');\n        accumulatedDistance = 0;\n    },\n    setTurnedPageCb: function setTurnedPageCb() {\n        var manager = this;\n        document.addEventListener('touchend', function (e) {\n            if (currentPageAtBottom && isTurnPage && manager.getAccumulatedDistance() < -100) {\n                manager.setClazThen(manager.currPage, 'go_up', function () {\n                    manager.turnToNextPage();\n                });\n            } else if (currentPageAtTop && isTurnPage && manager.getAccumulatedDistance() >= 100) {\n                manager.setClazThen(manager.prevPage, 'go_down', function () {\n                    manager.turnToPrevPage();\n                });\n            } else {\n                manager.resetAccumulatedDistance();\n                context.currPage.style.transform = 'translateY(0%)';\n            }\n            manager.resetTurnPage();\n        });\n    },\n    turnToNextPage: function turnToNextPage() {\n        this.currPage.classList.remove('go_up', 'turn_page');\n        this.currPage.style.transform = '';\n\n        this.currPage.removeEventListener('scroll', this.detectPosition);;\n\n        // currPage -> next_page, nextPage -> prev_page, prevPage -> current_page\n        var tempRef = this.currPage;\n        this.currPage = this.nextPage;\n        this.nextPage = this.prevPage;\n        this.prevPage = tempRef;\n\n        currentPageAtTop = true;\n        currentPageAtBottom = false;\n\n        this.currPage.addEventListener('scroll', this.detectPosition);\n        scrollManager.scrollBy(this.prevPage, MAX_HEIGHT);\n        scrollManager.scrollBy(this.nextPage, 0);\n\n        this.nextPage.classList.remove('prev_page');\n        this.nextPage.classList.add('next_page');\n        this.currPage.classList.remove('next_page');\n        this.currPage.classList.add('current_page');\n        this.prevPage.classList.remove('current_page');\n        this.prevPage.classList.add('prev_page');\n    },\n    turnToPrevPage: function turnToPrevPage() {\n        this.prevPage.classList.remove('go_down', 'turn_page');\n\n        this.prevPage.style.transform = '';\n\n        currentPageAtTop = false;\n        currentPageAtBottom = true;\n\n        this.currPage.removeEventListener('scroll', this.detectPosition);\n\n        // currPage -> prev_page, prevPage -> next_page, nextPage -> current_page\n        var tempRef = this.currPage;\n        this.currPage = this.prevPage;\n        this.prevPage = this.nextPage;\n        this.nextPage = tempRef;\n\n        this.currPage.addEventListener('scroll', this.detectPosition);\n        scrollManager.scrollBy(this.prevPage, MAX_HEIGHT);\n        scrollManager.scrollBy(this.nextPage, 0);\n\n        this.nextPage.classList.remove('current_page');\n        this.nextPage.classList.add('next_page');\n        this.currPage.classList.remove('prev_page');\n        this.currPage.classList.add('current_page');\n        this.prevPage.classList.remove('next_page');\n        this.prevPage.classList.add('prev_page');\n    },\n\n\n    setClazThen: function () {\n        var latency = 300;\n        return function (el, clz, cb) {\n            el.classList.add(clz);\n            setTimeout(function () {\n                cb && cb(el);\n            }, latency);\n        };\n    }(),\n\n    detectPosition: function detectPosition() {\n        var _el = this;\n        if (!scrollTicking) {\n            window.requestAnimationFrame(function () {\n                var scrollTop = _el.scrollTop,\n                    scrollBottom = _el.scrollHeight - _el.offsetHeight;\n                currentPageAtTop = scrollTop == 0;\n                currentPageAtBottom = scrollTop == scrollBottom;\n                console.log('currentPageAtTop: ' + currentPageAtTop + ' currentPageAtBottom: ' + currentPageAtBottom);\n                scrollTicking = false;\n            });\n        }\n        scrollTicking = true;\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);